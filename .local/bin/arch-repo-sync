#!/usr/bin/bash
# Maintained by sbp
# Wraps aursync command to build & upload AUR packages.
set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

# Locations
_name="${SBP_REPO_NAME:-sbp}"
_dest="${SBP_REPO_URL:-s3://sbp-arch/repo}"

# Directories
if [ -d "${XDG_CACHE_HOME}" ] ; then
    _local="${XDG_CACHE_HOME}/${_name}-repo"
    _chroot="${XDG_CACHE_HOME}/${_name}-chroot"
elif [ -d "${HOME}/.cache" ] ; then
    _local="${HOME}/.cache/${_name}-repo"
    _chroot="${HOME}/.cache/${_name}-chroot"
else
    _local="/tmp/${_name}-repo"
    _chroot="/tmp/${_name}-chroot"
fi

# Config
_conf="${XDG_CONFIG_HOME}/pacman/makepkg.conf"
[ -e "${_conf}" ] || _conf="/etc/makepkg.conf"

# Create and clean directories
mkdir --parents "${_local}" & rm --recursive --force "${_local:?}/"*

# Create the chroot if not present
mkdir --parents "${_chroot}"
if [ ! -d "${_chroot}/root" ] ; then
    mkarchroot -C /etc/pacman.conf -M "${_conf}" "$_chroot/root" base base-devel
fi

# Sync remote DB to local
_database="$(s3cmd ls "${_dest}/${_name}" | awk '/\.db\./ && !/old$/ {print $4}')"
_filelist="$(s3cmd ls "${_dest}/${_name}" | awk '/\.files\./ && !/old$/ {print $4}')"
s3cmd sync "${_database}" "${_local}/"
s3cmd sync "${_filelist}" "${_local}/"
ln --symbolic --force "${_local}/$(basename "${_database}")" "${_local}/$_name.db"
ln --symbolic --force "${_local}/$(basename "${_filelist}")" "${_local}/$_name.files"

# Run aursync on all arguments
for _arg in "${@}" ; do
    aur sync \
        --database "${_name}" \
        --root "${_local}/" \
        --chroot --directory "${_chroot}" \
        --pacman-conf /etc/pacman.conf \
        --makepkg-conf "${_conf}" \
        "${_arg}"
done

# Upload all the newly generated package files

# Remove old versions from s3
for _file in $(find "${_local}/" -maxdepth 2 -name "*.pkg.tar*") ; do
    # Remove old versions from s3
    _pre="$(echo _file | sed 's|^\(a-z,A-Z,-]*\)-[0-9]\(.*\)|\1|g')"
    s3cmd rm "${_dest}/${_pre}-*" || true
    # Add to s3
    s3cmd sync --acl-public $_file "${_dest}/"
done

# Sync local database to remote
s3cmd sync --follow-symlinks --acl-public \
    "${_local}/${_name}.db"* \
    "${_local}/${_name}.files"* \
    "${_dest}/"
