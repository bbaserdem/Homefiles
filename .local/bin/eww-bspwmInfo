#!/bin/dash
# Script for eww to print the desktop status of the primary monitor

# Absorb the monitor id
if [ -z "${1}" ] ; then
    _monitor_id='primary'
else
    _monitor_id="${1}"
fi

# The printer loop
print_json () {
    # Get raw bspwm info
    _nodeInfo="$(bspc query --node focused --tree)"
    if [ -z "${_nodeInfo}" ] ; then
        _node='{"class": "", "instance": "", "state": ""}'
    else
        _node="$(jq --raw-output --compact-output --monochrome-output \
            --null-input --argjson info "${_nodeInfo}" '$info.client |
            {class: .className, instance: .instanceName, state: .state}')"
    fi

    _tree="$(bspc query --tree --monitor "${_monitor_id}")"
    # Collected the selected (by default, primary) monitor info;
    #     * `bspc query --tree` spits out the monitor info in JSON format
    #     * Focused desktop is given in the first level key focusedDesktopId
    #     * Urgency of a window node is given in the urgent key; in the array
    #       inside the client key; but the level of this changes depending on
    #       how nested the node is; therefore recursive search is necessary
    jq --raw-output --compact-output --monochrome-output --null-input \
        --argjson tree "${_tree}" --argjson node "${_node}" '[ $tree.desktops[]
        | { name:   .name                       ,
            id:     .id                         ,
            node:   .focusedNodeId              ,
            layout: .layout                     ,
            urgent: map( .. | .urgent? ) | any  ,
            state:  "unoccupied"                }
        | if .node != 0                    then .state = "occupied" else . end
        | if .urgent                       then .state = "urgent"   else . end
        | if .id == $tree.focusedDesktopId then .state = "focused"  else . end
        | del(.urgent) | del(.node)
        ]
        | { desktops:   .                                   ,
            id:         $tree.focusedDesktopId              ,
            mode:     $tree.desktops[]
                | select(.id == $tree.focusedDesktopId)
                | .layout                                   ,
            title:      $node.class                         ,
            instance:   $node.instance                      ,
            state:      $node.state                         }
        | if .mode == "monocle" then .icon = "" else .icon = "﬿" end
        | if .state == "floating" then .icon = "" else . end'
    # This jq filter spits JSON formatted data with the following info
    #   layout:             Layout for the current desktop
    #   desktops[].name:    Title of the desktop, as named
    #   desktops[].id:      id # of the desktop (to reference button command to)
    #   desktops[].state:   State of desktop in the following precedence order:
    #                       focused > urgent > occupied > empty (default)
    # * The node and urgent keys are just mid calculation, and are not required
}

# We want to subscribe to the following bspwm events;
# * Desktop (All events) <add|rename|remove|swap|transfer|focus|activate|layout>
# * Node (Just ones that <creation|deletion|movement|flag-change>
#   Also; too many events can be sent right after another, so try to buffer that
# * Sticky nodes; such as scratchpad move with desktop focus
#     so try to buffer that.
# Buffer duration in 'micro'seconds
_bufdur=50000
(bspc subscribe desktop node_flag node_transfer node_add node_remove 2>&1 & echo "${!}" && wait) | (
    # Trap to kill the listener if parser loop is done
    trap 'kill "${_thispid}"; trap - EXIT' EXIT
    read -r _thispid
    # Do a line of printing; and record the time
    print_json && _last="$(($(date '+%s%6N') - _bufdur))" || exit
    # Loop until listener breaks
    while ps -o pid= -p "${_thispid}" >/dev/null 2>&1 ; do
        # Listen for a line to print as long as pipe is open
        grep --max-count=1 --quiet '' || break
        _curr="$(date '+%s%6N')"
        # Print only if the time between last and now is beyond buffer
        if [ "$((_curr - _last))" -ge "${_bufdur}" ] ; then
            # Schedule line of printing when buffer expires
            # Buffer is very short; no matter if we don't immediately print
            ( sleep "${_bufdur}e-6s" ; print_json ) &
        fi
    done
)
